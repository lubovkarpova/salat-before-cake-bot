import logging
import os
import re
import asyncio
from datetime import datetime, date
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram import Router, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from dotenv import load_dotenv
import openai
from database import db

load_dotenv()

API_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')

if not API_TOKEN or not OPENAI_API_KEY:
    print("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã TELEGRAM_BOT_TOKEN –∏–ª–∏ OPENAI_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    exit(1)

openai.api_key = OPENAI_API_KEY

logging.basicConfig(level=logging.INFO)

bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=MemoryStorage())
router = Router()

class ProfileStates(StatesGroup):
    waiting_for_gender = State()
    waiting_for_age = State()
    waiting_for_height = State()
    waiting_for_weight = State()
    waiting_for_activity = State()
    waiting_for_goal = State()

class FoodStates(StatesGroup):
    waiting_for_food_description = State()
    waiting_for_clarification = State()

def parse_kbju_from_gpt(gpt_response: str) -> dict:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ö–ë–ñ–£ –∏–∑ –æ—Ç–≤–µ—Ç–∞ GPT"""
    print(f"DEBUG: –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç GPT: {gpt_response}")
    
    # –ò—â–µ–º –∫–∞–ª–æ—Ä–∏–∏
    calories_match = re.search(r'–∫–∞–ª–æ—Ä–∏[–π–∏].*?(\d+(?:-\d+)?)', gpt_response, re.IGNORECASE)
    if calories_match:
        calories_str = calories_match.group(1)
        if '-' in calories_str:
            # –ï—Å–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω, –±–µ—Ä–µ–º –≤–µ—Ä—Ö–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            calories = int(calories_str.split('-')[1])
        else:
            calories = int(calories_str)
    else:
        calories = 0
    
    # –ò—â–µ–º –±–µ–ª–∫–∏
    proteins_match = re.search(r'–±–µ–ª–∫[–∞–∏].*?(\d+(?:\.\d+)?)', gpt_response, re.IGNORECASE)
    proteins = int(float(proteins_match.group(1))) if proteins_match else 0
    
    # –ò—â–µ–º –∂–∏—Ä—ã
    fats_match = re.search(r'–∂–∏—Ä[–∞–∏].*?(\d+(?:\.\d+)?)', gpt_response, re.IGNORECASE)
    fats = int(float(fats_match.group(1))) if fats_match else 0
    
    # –ò—â–µ–º —É–≥–ª–µ–≤–æ–¥—ã
    carbs_match = re.search(r'—É–≥–ª–µ–≤–æ–¥[–∞–∏].*?(\d+(?:\.\d+)?)', gpt_response, re.IGNORECASE)
    carbs = int(float(carbs_match.group(1))) if carbs_match else 0
    
    print(f"DEBUG: –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è - –∫–∞–ª–æ—Ä–∏–∏: {calories}, –±–µ–ª–∫–∏: {proteins}, –∂–∏—Ä—ã: {fats}, —É–≥–ª–µ–≤–æ–¥—ã: {carbs}")
    
    return {
        'calories': calories,
        'proteins': proteins,
        'fats': fats,
        'carbs': carbs
    }

def save_food_to_daily(user_id: int, food_description: str, kbju_data: dict):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–¥—É –≤ –¥–Ω–µ–≤–Ω–æ–π —É—á–µ—Ç"""
    print(f"DEBUG: –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏—ë–º –ø–∏—â–∏: user_id={user_id}, description='{food_description}', kbju={kbju_data}")
    
    success = db.save_meal(user_id, food_description, kbju_data)
    if success:
        print("DEBUG: –ü—Ä–∏—ë–º –ø–∏—â–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —Ç–∞–±–ª–∏—Ü—É meals")
    else:
        print("DEBUG: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏")
    
    return success

def get_daily_summary(user_id: int) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–Ω–µ–≤–Ω—É—é —Å–≤–æ–¥–∫—É"""
    today = date.today().strftime('%Y-%m-%d')
    print(f"DEBUG: –ü–æ–ª—É—á–∞–µ–º –¥–Ω–µ–≤–Ω—ã–µ –∏—Ç–æ–≥–∏: user_id={user_id}, date={today}")
    
    summary = db.get_daily_summary(user_id, today)
    print(f"DEBUG: –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞: {summary}")
    
    if summary:
        print(f"DEBUG: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ç–æ–≥–∏ –∏–∑ daily_summaries: {summary}")
        return summary
    else:
        print("DEBUG: –î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω—É–ª–∏")
        return {'calories': 0, 'proteins': 0, 'fats': 0, 'carbs': 0, 'meals': 0}

@router.message(Command("start", "help"))
async def send_welcome(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ –ö–ë–ñ–£ –∏ —Å–æ–≤–µ—Ç–æ–≤ –ø–æ –ø–∏—Ç–∞–Ω–∏—é.\n\n"
        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/profile - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/target - –ø–æ–∫–∞–∑–∞—Ç—å —Ü–µ–ª–µ–≤—ã–µ –∫–∞–ª–æ—Ä–∏–∏\n"
        "/day - –ø–æ–∫–∞–∑–∞—Ç—å –¥–Ω–µ–≤–Ω—É—é —Å–≤–æ–¥–∫—É\n"
        "/meals - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—Ä–∏—ë–º—ã –ø–∏—â–∏ –∑–∞ –¥–µ–Ω—å\n\n"
        "üçΩ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏, —á—Ç–æ —Ç—ã –µ–ª(–∞), –∏ —è –ø–æ—Å—á–∏—Ç–∞—é –ö–ë–ñ–£!"
    )

@router.message(Command("profile"))
async def profile_start(message: Message, state: FSMContext):
    if db.user_profile_exists(message.from_user.id):
        await message.answer("–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—å! –ò—Å–ø–æ–ª—å–∑—É–π /target —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ü–µ–ª–µ–≤—ã–µ –∫–∞–ª–æ—Ä–∏–∏.")
        return
    
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ú—É–∂—Å–∫–æ–π"), KeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π")]
        ],
        resize_keyboard=True
    )
    
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–∏–º —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –ö–ë–ñ–£.\n\n–ö–∞–∫–æ–π —É —Ç–µ–±—è –ø–æ–ª?", reply_markup=keyboard)
    await state.set_state(ProfileStates.waiting_for_gender)

@router.message(ProfileStates.waiting_for_gender)
async def process_gender(message: Message, state: FSMContext):
    gender = message.text.strip()
    if gender not in ["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ '–ú—É–∂—Å–∫–æ–π' –∏–ª–∏ '–ñ–µ–Ω—Å–∫–∏–π'")
        return
    
    await state.update_data(gender=gender)
    
    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
    await message.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç? (–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ)", reply_markup=ReplyKeyboardRemove())
    await state.set_state(ProfileStates.waiting_for_age)

@router.message(ProfileStates.waiting_for_age)
async def process_age(message: Message, state: FSMContext):
    try:
        age = int(message.text.strip())
        if age < 10 or age > 100:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (10-100 –ª–µ—Ç)")
            return
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return
    
    await state.update_data(age=age)
    
    await message.answer("–ö–∞–∫–æ–π —É —Ç–µ–±—è —Ä–æ—Å—Ç –≤ —Å–º? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 170)")
    await state.set_state(ProfileStates.waiting_for_height)

@router.message(ProfileStates.waiting_for_height)
async def process_height(message: Message, state: FSMContext):
    try:
        height = int(message.text.strip())
        if height < 100 or height > 250:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç (100-250 —Å–º)")
            return
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return
    
    await state.update_data(height=height)
    
    await message.answer("–ö–∞–∫–æ–π —É —Ç–µ–±—è –≤–µ—Å –≤ –∫–≥? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 65)")
    await state.set_state(ProfileStates.waiting_for_weight)

@router.message(ProfileStates.waiting_for_weight)
async def process_weight(message: Message, state: FSMContext):
    try:
        weight = int(message.text.strip())
        if weight < 30 or weight > 300:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –≤–µ—Å (30-300 –∫–≥)")
            return
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return
    
    await state.update_data(weight=weight)
    
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ù–∏–∑–∫–∏–π"), KeyboardButton(text="–°—Ä–µ–¥–Ω–∏–π"), KeyboardButton(text="–í—ã—Å–æ–∫–∏–π")]
        ],
        resize_keyboard=True
    )
    
    await message.answer(
        "–ö–∞–∫–æ–π —É —Ç–µ–±—è —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏?\n\n"
        "üèÉ‚Äç‚ôÄÔ∏è –ù–∏–∑–∫–∏–π - —Å–∏–¥—è—á–∏–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏, –º–∞–ª–æ –¥–≤–∏–∂–µ–Ω–∏—è\n"
        "üèÉ‚Äç‚ôÄÔ∏è –°—Ä–µ–¥–Ω–∏–π - —É–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, —Å–ø–æ—Ä—Ç 2-3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é\n"
        "üèÉ‚Äç‚ôÄÔ∏è –í—ã—Å–æ–∫–∏–π - –∞–∫—Ç–∏–≤–Ω—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏, —Å–ø–æ—Ä—Ç 4+ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é",
        reply_markup=keyboard
    )
    await state.set_state(ProfileStates.waiting_for_activity)

@router.message(ProfileStates.waiting_for_activity)
async def process_activity(message: Message, state: FSMContext):
    activity = message.text.strip()
    if activity not in ["–ù–∏–∑–∫–∏–π", "–°—Ä–µ–¥–Ω–∏–π", "–í—ã—Å–æ–∫–∏–π"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: –ù–∏–∑–∫–∏–π, –°—Ä–µ–¥–Ω–∏–π, –í—ã—Å–æ–∫–∏–π")
        return
    
    await state.update_data(activity=activity)
    
    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ü–µ–ª–µ–π
    await message.answer(
        "–ö–∞–∫–æ–≤–∞ —Ç–≤–æ—è —Ü–µ–ª—å? –ù–∞–ø–∏—à–∏ —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n\n"
        "üéØ –ü–æ—Ö—É–¥–µ–Ω–∏–µ: –ø–æ—Ö—É–¥–µ—Ç—å, —Å–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å\n"
        "üí™ –ù–∞–±–æ—Ä –º–∞—Å—Å—ã: –Ω–∞–±—Ä–∞—Ç—å –≤–µ—Å, –Ω–∞—Ä–∞—Å—Ç–∏—Ç—å –º—ã—à—Ü—ã\n"
        "‚öñÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ: –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ñ–æ—Ä–º—É, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–µ—Å\n"
        "ü•© –ë–µ–ª–æ–∫: —Å–ª–µ–¥–∏—Ç—å –∑–∞ –±–µ–ª–∫–æ–º, –ø–æ–≤—ã—Å–∏—Ç—å –ø—Ä–æ—Ç–µ–∏–Ω\n"
        "ü©∏ –ó–¥–æ—Ä–æ–≤—å–µ: —Å–Ω–∏–∑–∏—Ç—å —Ö–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω, –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Å–∞—Ö–∞—Ä\n"
        "ü•ó –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ: —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—Ç—å —Ä–∞—Ü–∏–æ–Ω, –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ\n\n"
        "–ò–ª–∏ –æ–ø–∏—à–∏ —Å–≤–æ—é —Ü–µ–ª—å —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏!",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(ProfileStates.waiting_for_goal)

@router.message(ProfileStates.waiting_for_goal)
async def process_goal(message: Message, state: FSMContext):
    goal = message.text.strip()
    if len(goal) < 3:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏ —Ü–µ–ª—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ")
        return
    
    await state.update_data(goal=goal)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
    data = await state.get_data()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    success = db.save_user_profile(message.from_user.id, data)
    
    if success:
        await message.answer(
            f"–û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω:\n\n"
            f"üë§ –ü–æ–ª: {data['gender']}\n"
            f"üìÖ –í–æ–∑—Ä–∞—Å—Ç: {data['age']} –ª–µ—Ç\n"
            f"üìè –†–æ—Å—Ç: {data['height']} —Å–º\n"
            f"‚öñÔ∏è –í–µ—Å: {data['weight']} –∫–≥\n"
            f"üèÉ‚Äç‚ôÄÔ∏è –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {data['activity']}\n"
            f"üéØ –¶–µ–ª—å: {data['goal']}\n\n"
            f"–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å:\n"
            f"‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å, —á—Ç–æ —Ç—ã –µ–ª(–∞) - —è –ø–æ—Å—á–∏—Ç–∞—é –ö–ë–ñ–£\n"
            f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /target - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ü–µ–ª–µ–≤—ã–µ –∫–∞–ª–æ—Ä–∏–∏\n"
            f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /day - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–Ω–µ–≤–Ω—É—é —Å–≤–æ–¥–∫—É"
        )
    else:
        await message.answer("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
    
    await state.clear()

@router.message(lambda message: not message.text.startswith('/'))
async def auto_food_analysis(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ –¥—Ä—É–≥–æ–º –¥–∏–∞–ª–æ–≥–µ
    current_state = await state.get_state()
    if current_state:
        return
    
    user_food = message.text.strip()
    
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if len(user_food) < 2:
        return
    
    print(f"DEBUG: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–¥—É: '{user_food}'")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å
    if not db.user_profile_exists(message.from_user.id):
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å! –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /profile")
        return
    
    await message.answer("üçΩ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–≤–æ—é –µ–¥—É... ‚è≥")
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ GPT
        prompt = f"–û—Ü–µ–Ω–∏ –ö–ë–ñ–£ {user_food}"
        
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–∏—Ç–∞–Ω–∏—é. –û—Ü–µ–Ω–∏–≤–∞–π –ö–ë–ñ–£ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=200
        )
        
        gpt_response = response.choices[0].message.content
        print(f"DEBUG: –û—Ç–≤–µ—Ç GPT: {gpt_response}")
        
        # –ü–∞—Ä—Å–∏–º –ö–ë–ñ–£ –∏–∑ –æ—Ç–≤–µ—Ç–∞
        kbju_data = parse_kbju_from_gpt(gpt_response)
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–∞–ª–æ—Ä–∏–∏, –ø—Ä–æ—Å–∏–º —É—Ç–æ—á–Ω–∏—Ç—å
        if kbju_data['calories'] == 0:
            clarification_prompt = f"–î–ª—è –æ—Ü–µ–Ω–∫–∏ –ö–ë–ñ–£ {user_food} –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–∑–º–µ—Ä–µ –ø–æ—Ä—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ."
            await message.answer(clarification_prompt)
            await state.update_data(original_food=user_food)
            await state.set_state(FoodStates.waiting_for_clarification)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –µ–¥—É –≤ –¥–Ω–µ–≤–Ω–æ–π —É—á–µ—Ç
        save_food_to_daily(message.from_user.id, user_food, kbju_data)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–Ω–µ–≤–Ω—É—é —Å–≤–æ–¥–∫—É
        daily_summary = get_daily_summary(message.from_user.id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_text = f"üçΩ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–≤–æ—é –µ–¥—É... ‚è≥\n\n"
        response_text += f"–î–ª—è {user_food}:\n"
        response_text += f"üî• –ö–∞–ª–æ—Ä–∏–∏: {kbju_data['calories']} –∫–∫–∞–ª\n"
        response_text += f"ü•© –ë–µ–ª–∫–∏: {kbju_data['proteins']} –≥\n"
        response_text += f"ü•ë –ñ–∏—Ä—ã: {kbju_data['fats']} –≥\n"
        response_text += f"üçû –£–≥–ª–µ–≤–æ–¥—ã: {kbju_data['carbs']} –≥\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–µ–≤–Ω—É—é —Å–≤–æ–¥–∫—É
        response_text += f"üìä –ò—Ç–æ–≥–æ –∑–∞ –¥–µ–Ω—å ({daily_summary['meals']} –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏):\n"
        response_text += f"üî• –ö–∞–ª–æ—Ä–∏–∏: {daily_summary['calories']} –∫–∫–∞–ª\n"
        response_text += f"ü•© –ë–µ–ª–∫–∏: {daily_summary['proteins']} –≥\n"
        response_text += f"ü•ë –ñ–∏—Ä—ã: {daily_summary['fats']} –≥\n"
        response_text += f"üçû –£–≥–ª–µ–≤–æ–¥—ã: {daily_summary['carbs']} –≥"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ü–µ–ª–∏
        target = db.calculate_target_calories(message.from_user.id)
        if target['calories'] > 0:
            progress = (daily_summary['calories'] / target['calories']) * 100
            response_text += f"\n\nüéØ –ü—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ü–µ–ª–∏: {progress:.1f}%"
        
        await message.answer(response_text)
        
    except Exception as e:
        print(f"DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –µ–¥—ã: {e}")
        await message.answer("–ò–∑–≤–∏–Ω–∏, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –µ–¥—ã. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")

@router.message(FoodStates.waiting_for_clarification)
async def food_clarification(message: Message, state: FSMContext):
    data = await state.get_data()
    original_food = data.get('original_food', '')
    clarification = message.text.strip()
    
    combined_food = f"{original_food} {clarification}"
    
    await message.answer("üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞—é –ö–ë–ñ–£... ‚è≥")
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ GPT —Å —É—Ç–æ—á–Ω–µ–Ω–∏–µ–º
        prompt = f"–û—Ü–µ–Ω–∏ –ö–ë–ñ–£ {combined_food}\n\n–í–∫–ª—é—á–∞–π –≤ –æ—Ç–≤–µ—Ç —Å–∞–º–º–∞—Ä–∏:\nüî• –ö–∞–ª–æ—Ä–∏–∏: 0 –∫–∫–∞–ª\nü•© –ë–µ–ª–∫–∏: 0 –≥\nü•ë –ñ–∏—Ä—ã: 0 –≥\nüçû –£–≥–ª–µ–≤–æ–¥—ã: 0 –≥"
        
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–∏—Ç–∞–Ω–∏—é. –û—Ü–µ–Ω–∏–≤–∞–π –ö–ë–ñ–£ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=200
        )
        
        gpt_response = response.choices[0].message.content
        print(f"DEBUG: –û—Ç–≤–µ—Ç GPT —Å —É—Ç–æ—á–Ω–µ–Ω–∏–µ–º: {gpt_response}")
        
        # –ü–∞—Ä—Å–∏–º –ö–ë–ñ–£ –∏–∑ –æ—Ç–≤–µ—Ç–∞
        kbju_data = parse_kbju_from_gpt(gpt_response)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –µ–¥—É –≤ –¥–Ω–µ–≤–Ω–æ–π —É—á–µ—Ç
        save_food_to_daily(message.from_user.id, combined_food, kbju_data)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–Ω–µ–≤–Ω—É—é —Å–≤–æ–¥–∫—É
        daily_summary = get_daily_summary(message.from_user.id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_text = f"üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞—é –ö–ë–ñ–£... ‚è≥\n\n"
        response_text += f"–î–ª—è {combined_food}:\n"
        response_text += f"üî• –ö–∞–ª–æ—Ä–∏–∏: {kbju_data['calories']} –∫–∫–∞–ª\n"
        response_text += f"ü•© –ë–µ–ª–∫–∏: {kbju_data['proteins']} –≥\n"
        response_text += f"ü•ë –ñ–∏—Ä—ã: {kbju_data['fats']} –≥\n"
        response_text += f"üçû –£–≥–ª–µ–≤–æ–¥—ã: {kbju_data['carbs']} –≥\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–µ–≤–Ω—É—é —Å–≤–æ–¥–∫—É
        response_text += f"üìä –ò—Ç–æ–≥–æ –∑–∞ –¥–µ–Ω—å ({daily_summary['meals']} –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏):\n"
        response_text += f"üî• –ö–∞–ª–æ—Ä–∏–∏: {daily_summary['calories']} –∫–∫–∞–ª\n"
        response_text += f"ü•© –ë–µ–ª–∫–∏: {daily_summary['proteins']} –≥\n"
        response_text += f"ü•ë –ñ–∏—Ä—ã: {daily_summary['fats']} –≥\n"
        response_text += f"üçû –£–≥–ª–µ–≤–æ–¥—ã: {daily_summary['carbs']} –≥"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ü–µ–ª–∏
        target = db.calculate_target_calories(message.from_user.id)
        if target['calories'] > 0:
            progress = (daily_summary['calories'] / target['calories']) * 100
            response_text += f"\n\nüéØ –ü—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ü–µ–ª–∏: {progress:.1f}%"
        
        await message.answer(response_text)
        
    except Exception as e:
        print(f"DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–∏ –µ–¥—ã: {e}")
        await message.answer("–ò–∑–≤–∏–Ω–∏, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –µ–¥—ã. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
    
    await state.clear()

@router.message(Command("day"))
async def show_daily_summary(message: Message):
    user_id = message.from_user.id
    
    print(f"DEBUG: /day –≤—ã–∑–≤–∞–Ω –¥–ª—è user_id={user_id}")
    
    if not db.user_profile_exists(user_id):
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å! –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /profile")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–Ω–µ–≤–Ω—É—é —Å–≤–æ–¥–∫—É
    daily_summary = get_daily_summary(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–µ–≤—ã–µ –∫–∞–ª–æ—Ä–∏–∏
    target = db.calculate_target_calories(user_id)
    
    if target['calories'] == 0:
        await message.answer("–û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ —Ü–µ–ª–µ–≤—ã—Ö –∫–∞–ª–æ—Ä–∏–π. –ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.")
        return
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    calories_progress = (daily_summary['calories'] / target['calories']) * 100 if target['calories'] > 0 else 0
    proteins_progress = (daily_summary['proteins'] / target['proteins']) * 100 if target['proteins'] > 0 else 0
    fats_progress = (daily_summary['fats'] / target['fats']) * 100 if target['fats'] > 0 else 0
    carbs_progress = (daily_summary['carbs'] / target['carbs']) * 100 if target['carbs'] > 0 else 0
    
    text = f"üìä –î–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ ({daily_summary['meals']} –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏):\n\n"
    text += f"üî• –ö–∞–ª–æ—Ä–∏–∏: {daily_summary['calories']} / {target['calories']} –∫–∫–∞–ª ({calories_progress:.1f}%)\n"
    text += f"ü•© –ë–µ–ª–∫–∏: {daily_summary['proteins']} / {target['proteins']} –≥ ({proteins_progress:.1f}%)\n"
    text += f"ü•ë –ñ–∏—Ä—ã: {daily_summary['fats']} / {target['fats']} –≥ ({fats_progress:.1f}%)\n"
    text += f"üçû –£–≥–ª–µ–≤–æ–¥—ã: {daily_summary['carbs']} / {target['carbs']} –≥ ({carbs_progress:.1f}%)\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–π —Å–æ–≤–µ—Ç
    if daily_summary['meals'] == 0:
        text += "–°–µ–≥–æ–¥–Ω—è —Ç—ã –µ—â—ë –Ω–∏—á–µ–≥–æ –Ω–µ –µ–ª(–∞). –î–æ–±–∞–≤—å –µ–¥—É!"
    elif calories_progress < 50:
        text += "üí° –°–æ–≤–µ—Ç: –ü–æ–ø—Ä–æ–±—É–π –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–∏–Ω –ø—Ä–∏—ë–º –ø–∏—â–∏ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏."
    elif calories_progress > 120:
        text += "üí° –°–æ–≤–µ—Ç: –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –Ω–µ–º–Ω–æ–≥–æ —Å–Ω–∏–∑–∏—Ç—å –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏—Ö –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏."
    else:
        text += "üí° –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –¢—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏ –∫ —Å–≤–æ–µ–π —Ü–µ–ª–∏."
    
    await message.answer(text)

@router.message(Command("target"))
async def show_target_calories(message: Message):
    user_id = message.from_user.id
    
    print(f"DEBUG: /target –≤—ã–∑–≤–∞–Ω –¥–ª—è user_id={user_id}")
    if not db.user_profile_exists(user_id):
        print("DEBUG: –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await message.answer(
            "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å! –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /profile"
        )
        return
    
    profile = db.get_user_profile(user_id)
    print(f"DEBUG: –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {profile}")
    target = db.calculate_target_calories(user_id)
    print(f"DEBUG: –¶–µ–ª–µ–≤—ã–µ –∫–∞–ª–æ—Ä–∏–∏: {target}")
    
    if target['calories'] == 0:
        await message.answer("–û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ —Ü–µ–ª–µ–≤—ã—Ö –∫–∞–ª–æ—Ä–∏–π. –ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.")
        return
    
    text = f"üéØ –¶–µ–ª–µ–≤—ã–µ –∫–∞–ª–æ—Ä–∏–∏ –¥–ª—è {profile.get('gender', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')}:\n\n"
    text += f"üìä –ë–∞–∑–æ–≤—ã–π –æ–±–º–µ–Ω –≤–µ—â–µ—Å—Ç–≤ (BMR): {target['bmr']} –∫–∫–∞–ª\n"
    text += f"üî• –û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥ —ç–Ω–µ—Ä–≥–∏–∏ (TDEE): {target['tdee']} –∫–∫–∞–ª\n"
    text += f"üéØ –¶–µ–ª–µ–≤—ã–µ –∫–∞–ª–æ—Ä–∏–∏: {target['calories']} –∫–∫–∞–ª\n\n"
    text += f"ü•© –ë–µ–ª–∫–∏: {target['proteins']} –≥\n"
    text += f"ü•ë –ñ–∏—Ä—ã: {target['fats']} –≥\n"
    text += f"üçû –£–≥–ª–µ–≤–æ–¥—ã: {target['carbs']} –≥\n\n"
    text += f"üí° –¶–µ–ª—å: {profile.get('goal', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
    text += f"üèÉ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {profile.get('activity', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"
    text += f"‚ÑπÔ∏è {target.get('explanation', '')}"
    
    await message.answer(text)

@router.message(Command("meals"))
async def show_meals(message: Message):
    user_id = message.from_user.id
    
    if not db.user_profile_exists(user_id):
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å! –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /profile")
        return
    
    meals = db.get_meals_for_day(user_id)
    
    if not meals:
        await message.answer("–°–µ–≥–æ–¥–Ω—è —Ç—ã –µ—â—ë –Ω–∏—á–µ–≥–æ –Ω–µ –µ–ª(–∞). –î–æ–±–∞–≤—å –µ–¥—É!")
        return
    
    text = f"üçΩ –ü—Ä–∏—ë–º—ã –ø–∏—â–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è ({len(meals)}):\n\n"
    
    for i, meal in enumerate(meals, 1):
        text += f"{i}. {meal['description']}\n"
        text += f"   üî• {meal['calories']} –∫–∫–∞–ª | ü•© {meal['proteins']}–≥ | ü•ë {meal['fats']}–≥ | üçû {meal['carbs']}–≥\n\n"
    
    await message.answer(text)

dp.include_router(router)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())